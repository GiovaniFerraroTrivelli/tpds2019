@startUML

title Diagrama de Clases Grupo 4A

note as N1
Grupo 4A:
Mat√≠as Bode,
Francisco Busso,
Giovani Ferraro Trivelli,
Miguel Storani
end note

hide enum methods
hide interface attributes

package Dominio{
    class Poliza {
        -idSucursal: Integer
        -numeroPoliza: Integer
        -cobertura: TipoCobertura
        -inicioVigencia: Date
        -finVigencia: Date
        -kmsAnuales: Integer
        -estado: EstadoPoliza
        -siniestros: Integer
        -dominio: String
        -chasis: String
        -motor: String
        -anioFabricacion: Integer
	    -seGuardaEnGarage: Boolean
	    -poseeAlarma: Boolean
	    -poseeRastreoVehicular: Boolean
	    -poseeTuercasAntirrobo: Boolean
        +calcularSuma(): Float
        +polizaPaga(): Boolean
        +calcularPrima(): Float
        +calcularDescuentos(): Float
    }

    class ModificacionPoliza {
        -cobertura: TipoCobertura
        -kmsAnuales: Integer
        -siniestros: Integer
        -dominio: String
        -chasis: String
        -motor: String
        -fabricacion: Integer
	    -seGuardaEnGarage: Boolean
	    -poseeAlarma: Boolean
	    -poseeRastreoVehicular: Boolean
	    -poseeTuercasAntirrobo: Boolean
    }

    class HistorialModificacionesPoliza {
        FechaModificacion: Date
    }


    
    class Modelo {
    	-nombre: String
        -anio: List<Integer>
    	-factorRiesgoRobo: HistorialValor
    }


    /'class Cobrador {
        +registrarPago(Poliza): Void
    }
    
    class ProductorSeguros {
        +altaCliente(String[]): Cliente
        +modificaCliente(String[], Cliente): Void
        +buscarCliente(String[]): Cliente
        +consultarCliente(Cliente): Void
        +bajaCliente(Cliente): Void
        +altaPoliza(String[]): Poliza
        +modificarPoliza(String[], Poliza): Void
        +bajaPoliza(Poliza): Void
    }
    
    class Gerente {
        generarPropuestasRenovacion(): Void
        generarInforme(): Void
    }
    '/
    class Cliente {
        -idCliente: Integer
        -nombre: String
        -apellido: String
        -tipoDocumento: TipoDocumento
        -numeroDocumento: Integer
        -cuil: Integer
        -sexo: Sexo
        -nacimiento: Date
        -profesion: String
        -estadoCivil: EstadoCivil
        -email: String
        -registro: Integer
        -condicionIva: CondicionIva
        -domicilio: Domicilio
        +edad(): Integer
        +enMora(): Boolean
        +alDia(): Boolean
        +clienteNormal(): Boolean
        +clienteActivo(): Boolean
        +clientePlata(): Boolean
    }
    
    class Documento {        
	-tipoDocumento: TipoDocumento
        -numeroDocumento: Integer
    }

    class MedidasSeguridad {
	-seGuardaEnGarage: Boolean
	-poseeAlarma: Boolean
	-poseeRastreoVehicular: Boolean
	-poseeTuercasAntirrobo: Boolean
    }

    
    package "Tipo de dato HistorialValor" <<Rectangle>> {
        class HistorialValor {
        	+valorActual(): Float
        	+valorEnFecha(Date): Float
        }

        class Vigencia {
        	-fechaInicio: Date
        	-fechaFin: Date
        }

        Class Valor {
        	-valor: Float
        }
        HistorialValor "1" -right-> "n" Valor 
        (HistorialValor, Valor) . Vigencia
    }

    class HijoDeclarado {
        -fechaNacimiento: Date
        -estadoCivil: EstadoCivil
        -sexo: Sexo
        +edad(): Integer
    }

    class Domicilio {
        -calle: String
        -numero: Integer
        -piso: Integer
        -departamento: String
    }

    /'abstract EstadoPoliza {
        +handle(): Void
        +generada(): Boolean
        +suspendida(): Boolean
        +vigente(): Boolean
        +finalizada(): Boolean
    }

    class PolizaGenerada {
        +generada(): Boolean //<<Override>>// 
    }
    
    class PolizaSuspendida{
        +suspendida(): Boolean //<<Override>>//
    }
    
    class PolizaVigente{
        +vigente(): Boolean //<<Override>>//
    }
    
    class PolizaFinalizada{
        +finalizada(): Boolean //<<Override>>//
    }'/
    
    abstract FormaPago {
        +{abstract}polizaPaga(): Boolean
    }
    
    class PagoMensual {
        +polizaPaga(): Boolean //<<Override>>//
    }
    
    class PagoSemestral {
        +polizaPaga(): Boolean //<<Override>>//
    }
    
    class Cuota {
        -importe: MonetaryAmount
		-mesCorrespondiente: Mes
		-anio: Integer
        -cuotaPaga: Boolean
        +registrarPago(): Void
    }
    
	class Localidad {
		-nombre: String
		-CPA: Integer
		-factorRiesgo: HistorialValor
	}
	
	class Provincia {
		-nombre: String
	}
	class Pais {
		-nombre: String
	}

    class Usuario {
	    -nombreUsuario: String
	    -passwordHash: byte[512]
	    -salt: byte[16]
	    -nombre: String
	    -apellido: String
	    -email: String
    }
	
	class TipoCobertura{
		-nombre: String
		-descripcion: String
		-factorCobertura: HistorialValor
	}
	
	class FactoresCalculos<<(S, #FF7700) Singleton>> {
		-factorGuardaGarage: HistorialValor
		-factorAlarma: HistorialValor
		-factorRastreoVehicular: HistorialValor
		-factorTuercasAntirrobo: HistorialValor
		-factorKmRealizados: HistorialValor
		-factorSiniestros: List<HistorialValor>
		-factorCantidadHijos: HistorialValor
		-factorDerechosEmision: HistorialValor
		-factorDescuentoUnidadAdicional: HistorialValor
	}

	class Pago{
		-fechaHora: Timestamp
		-premio: MonetaryAmount
		+importe(): MonetaryAmount
	}
	
	class PagoCuota {
		-recargoMora: MonetaryAmount
		-bonificacionPagoAdelantado: MonetaryAmount
	}

	Pago "1" --> "1..n" Cuota
	(Pago, Cuota) . PagoCuota

	class Recibo{
		-numeroRecibo: Integer
		+emitir(): ReciboDTO
	}
	
    class Marca{
        -nombre: String
    }

    Cliente "1" -up- "0..n" Poliza
    Cliente "1..n" --> "1" Domicilio
    Cliente "1" --> "1" Documento    

    /'Usuario <-- Cobrador: <<is role of>>
    Usuario <-- ProductorSeguros: <<is role of>>
    Usuario <-- Gerente: <<is role of>>
	'/
   
    Poliza "0..n" o-- "1" Localidad
    Poliza "1" --> "1" MedidasSeguridad
    ModificacionPoliza "0..n" o-- "1" Localidad
    Poliza "0..n" o-- "0..n" HijoDeclarado
    Poliza "1" o--> "1" FormaPago
	Poliza "n" --> "1" TipoCobertura
    ModificacionPoliza "n" --> "1" TipoCobertura
    Usuario "1" <-- "n" ModificacionPoliza
    (Poliza, ModificacionPoliza) .. HistorialModificacionesPoliza
    ModificacionPoliza "0..1" -- "0..n" HijoDeclarado
	Poliza "n" --> "1" Modelo
    Marca "1" -- "1..n" Modelo
    
    FormaPago <|-- PagoMensual
    FormaPago <|-- PagoSemestral
    
    PagoMensual "1" *-- "6" Cuota
    PagoSemestral "1" *-- "1" Cuota

    Domicilio "1..n" --> "1" Localidad
	Localidad "1..n" --> "1" Provincia
	Provincia "1..n" --> "1" Pais
	
	Pago "1" -- "1" Recibo
	Poliza "1" -- "0..6" Pago
	Usuario "1" <-- "0 .. n" Pago
    Usuario "1" <-- "0 .. n" Poliza
}

package dao{
    class DaoCliente{
        +{static} session: Session
        +{static} buscarCliente(NumeroCliente): Cliente
        +{static} buscarClientes(ParametrosDeBusqueda): List<Cliente>
        +{static} consultarClientes(ParametrosDeConsulta): List<Cliente>
        +{static} getCliente(Integer): Cliente
        +{static} guardarCliente(): Void
        +{static} refresh(Object): Void
    }
    
   class DaoPoliza {
    	+{static} session: Session
    	+{static} getPoliza(Integer): Poliza 
    	+{static} buscarPoliza(String): ArrayList<Poliza> 
    	+{static} getPolizasVigentesOGeneradasConMotor(String): ArrayList<Poliza> 
    	+{static} getPolizasVigentesOGeneradasConChasis(String): ArrayList<Poliza> 
    	+{static} getAllPolizas(): ArrayList<Poliza> 
    	+{static} getPolizasVigentesOGeneradasConDominio(String): ArrayList<Poliza> 
    	+{static} save(Poliza): Void
    	+{static} update(Poliza): Void
    	+{static} getCoberturas(): ArrayList<TipoCobertura> 
    	+{static} getCoberturaContraTerceros(): TipoCobertura 
    	+{static} getCobertura(Integer): TipoCobertura 
    	+{static} actualizarPolizas(ArrayList<Poliza>): Void
    	+{static} refresh(Object): Void
    }
    
    class DaoUsuario {
    	+{static} session: Session 
    	+{static} getUsuario(String): Usuario 
    	+{static} refresh(Object): Void 
    }

    class DaoGeografico  {
    	+{static} session: Session 
    	+{static} getLocalidad(Integer): Localidad 
    	+{static} guardarLocalidad(Localidad): Void
    	+{static} refresh(Object): Void
    }

    
    class DaoPago {
    	+{static} session: Session 
    	+{static} getDescuentoPagoAdelantado(): Descuento 
    	+{static} getRecargoMora(): Recargo 
    	+{static} guardarPago(Pago): Void
    	+{static} updatePago(Pago): Void 
    	+{static} guardarRecibo(Recibo): Integer 
    	+{static} refresh(Object): Void
    }

    class QueryBuilder  {
    	+QueryBuilder()
    	+getQuery(ParametrosDeBusqueda, Session): Query
    	+getQuery(ParametrosDeConsulta, Session): Query
    	+getQuery(NumeroPoliza, Session): Query
    	+getCountQuery(ParametrosDeBusqueda, Session): Query
    }
    
    class HibernateUtil {
    	-{static} Lock: Lock
    	-{static} sessionFactory: SessionFactory 
    	-{static} session: Session 
    	+{static} getSessionfactory(): SessionFactory 
    	+{static} getSession(): Session 
    	+{static} shutdown(): Void
    	+{static} buildSessionFactory(): SessionFactory 
    	+{static} getCurrentSession(): Session 
    	+{static} getLock(): Lock 
    }
    
    class DaoVehiculo {
    	+{static} session: Session 
    	+{static} getModelo(Integer): Modelo 
    	+{static} save(Modelo): Void
    	+{static} refresh(Object): Void
    }
    
    HibernateUtil "1" <..>"1" DaoCliente
    HibernateUtil "1" <..>"1" DaoGeografico
    HibernateUtil "1" <..>"1" DaoPago
    HibernateUtil "1" <..>"1" DaoPoliza
    HibernateUtil "1" <..>"1" DaoUsuario
    HibernateUtil "1" <..>"1" DaoVehiculo
    
}

package Logica{
    class GestorCliente <<(S, #FF7700) Singleton>> {
        -{static} singleton: GestorCliente
        -GestorCliente()
        +{static} getInstance(): GestorCliente
        +buscar(String[]): Cliente 
        +modificar(Cliente, String[]): Void
        +alta(String[]): Cliente
        +calcularIdCliente(Cliente): Void
    }
    
    class GestorPoliza <<(S, #FF7700) Singleton>> {
        -{static} singleton: GestorPoliza
        -GestorPoliza()
        +{static} getInstance(): GestorPoliza
        +alta(String[]): Poliza
        +buscar(String[]): Poliza
        +modificar(Poliza, String[]): Void
        +registrarPago(Poliza): Void
    }

    class GestorUsuario <<(S, #FF7700) Singleton>> {
        -{static} singleton: GestorUsuario
        -GestorUsuario()
        +{static} getInstance(): GestorUsuario
        +alta(String[]): Usuario
        +buscar(String[]): Usuario
        +modificar(Usuario, String[]): Void
        +eliminar(Usuario): Void
    }
    
    class GestorSubSistemaDeSiniestros <<(S, #FF7700) Singleton>> {
        -{static} singleton: GestorSubSistemaDeSiniestros
        -GestorSubSistemaDeSiniestros()
        +{static} getInstance(): GestorSubSistemaDeSiniestros 
    }

	class GestorSistemaFinanciero <<(S, #FF7700) Singleton>> {
        -{static} singleton: GestorSistemaFinanciero
        -GestorSistemaFinanciero()
        +{static} getInstance(): GestorSistemaFinanciero
    }
	class GestorGeografico <<(S, #FF7700) Singleton>>{
		-{static} singleton: GestorGeografico
		-GestorGeografico()
		+{static} getInstance(): GestorGeografico
	}
	class GestorPagos <<(S, #FF7700) Singleton>>{
		-{static} singleton: GestorPagos
		-GestorPagos()
		+{static} getInstance(): GestorPagos
	}
	class GestorDocumentos <<(S, #FF7700) Singleton>>{
		-{static} singleton: GestorDocumentos
		-GestorDocumentos()
		+{static} getInstance(): GestorDocumentos
	}
}

package enumeradores {
    enum CondicionCliente {
    	Normal
    	Activo
    	Plata
    }
    
    enum CondicionIva {
    	ResponsableInscripto
    	ResponsableNoInscripto
    	NoResponsable
    	SujetoExento
    	ConsumidorFinal
    	ResponsableMonotributo
    	NoCategorizado
    	ProveedorExterior
    	ClienteExterior
    	Liberado
    	ResponsableInscriptoPercepcion
    	PeqContribuyente
    	MonotributistaSocial
    	PeqContribuyenteSocial
    }
    
    enum EstadoCivil{
        Soltero
        Casado
        Viudo
    }
    
    enum EstadoCuota {
    	PENDIENTE
    	MORA
    	PAGA
    }    
    
    enum EstadoPoliza {
        Generada
        Vigente
        Suspendida
        Finalizada
    }
    
    enum FormaPago {
    	MENSUAL
    	SEMESTRAL
    }

    enum Rol {
    	Cobrador
    	Gerente
    	ProductorDeSeguros
    }

    enum Sexo {
        Masculino
        Femenino
    }

    enum TipoDocumento {
        DNI
        LU
        LC
        LE
    }
}


DaoCliente <.. GestorCliente
DaoPoliza <.. GestorPoliza
DaoGeografico <.. GestorGeografico
DaoCuota <.. GestorPagos
'Poliza -- ValorAutomovil'

'Relaciones entre clases y gestores'

Cliente "n" ..> "1" GestorCliente
Localidad "n" ..> "1" GestorGeografico
Provincia "n" ..> "1" GestorGeografico
Pais "n" ..> "1" GestorGeografico
Pago "n" ..> "1" GestorPagos
Recibo "n" ..> "1" GestorDocumentos
Poliza "n" ..> "1" GestorPoliza
FactoresCalculos "1" <.. "1" GestorPoliza

'Relaciones entredistintos gestores'

GestorPagos "1" ..> "1" GestorDocumentos
GestorPoliza "1" ..> "1" GestorPagos
GestorPoliza "1" ..> "1" GestorSubSistemaDeSiniestros
GestorCliente "1" ..> "1" GestorSubSistemaDeSiniestros
GestorPagos "1" ..> "1" GestorSistemaFinanciero


@endUML
